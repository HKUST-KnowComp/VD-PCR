MB {
  # basic
  use_coref = false
  train_on_dense = false
  metrics_to_maximize = mrr

  # data
  visdial_image_feats = data/visdial/visdial_img_feat.lmdb

  visdial_train = data/all/visdial_1.0_train_with_vispro_bert_tokenized.json
  visdial_val = data/all/visdial_1.0_val_with_vispro_bert_tokenized.json
  visdial_test = data/all/visdial_1.0_test_with_vispro_bert_tokenized.json

  visdial_train_dense = data/all/visdial_1.0_train_dense_with_vispro_bert_tokenized.json
  visdial_val_dense = data/all/visdial_1.0_val_with_vispro_bert_tokenized.json

  visdial_train_dense_annotations = data/all/visdial_1.0_train_dense_annotations_corrected.json
  visdial_val_dense_annotations = data/all/visdial_1.0_val_dense_annotations.json

  rlv_hst_train_dense = data/rlv_hst/train_dense_crf_cap.json
  rlv_hst_train = data/rlv_hst/train_crf_cap.json
  rlv_hst_val = data/rlv_hst/val_crf_cap.json
  rlv_hst_test = data/rlv_hst/test_crf_cap.json

  start_path = checkpoints-release/basemodel
  model_config = config/bert_base_6layer_6conect.json
  dataloader_text_only = false
  rlv_hst_only = false
  rlv_hst_dense_round = false

  # visdial training
  visdial_tot_rounds = 11
  num_negative_samples = 1
  sequences_per_image = 2
  batch_size = 4
  lm_loss_coeff = 1
  nsp_loss_coeff = 1
  img_loss_coeff = 1
  visdial_loss_coeff = 1
  coref_loss_coeff = 0
  batch_multiply = 1
  use_trainval = false
  dense_loss = ce
  dense_loss_coeff = 0
  coref_only = false

  # visdial model
  mask_prob = 0.1
  image_mask_prob = 0.1
  max_seq_len = 256
  num_options = 100
  num_options_dense = 100
  use_embedding = vilbert

  # visdial evaluation
  eval_coref_on_test = false
  eval_visdial_on_test = true
  eval_batch_size = 1
  eval_line_batch_size = 40
  skip_mrr_eval = false
  skip_eval = false
  continue_evaluation = false
  eval_at_start = false

  # restore ckpt
  loads_best_ckpt = false
  loads_ckpt = false
  restarts = false
  resets_max_metric = false
  uses_new_optimizer = false
  sets_new_lr = false
  loads_start_path = false

  # training
  random_seed = 2020
  next_logging_pct = 1.0
  next_evaluating_pct = 50.0
  max_ckpt_to_keep = 1
  num_epochs = 10
  early_stop_epoch = 3
  skip_saving_ckpt = false
  dp_type = ddp
  stop_epochs = -1

  # predicting
  predict_split = test
  predict_shards_num = 0
  predict_shard = 0
  predict_each_round = false
  predict_dense_round = false
  num_test_dialogs = 8000
  num_val_dialogs = 2064
  save_score = false

  # optimizer
  reset_optim = none
  learning_rate_bert = 2e-5
  learning_rate_task = 2e-5
  min_lr = 1e-5

  decay_method_bert = linear
  decay_method_task = linear
  decay_exp = 2
  max_grad_norm = 0
  task_optimizer = adamw
  warmup_ratio = 0.1

  # directory
  bert_cache_dir = transformers
  log_dir = logs/vonly
  data_dir = data
  visdial_output_dir = visdial_output
  coref_output_dir = coref_output
}

MB-JC_predict = ${MB} {
  # data
  visdial_test = data/processed/visdial_1.0_test_with_vispro_bert_tokenized.json
  start_path = logs/joint/MB-JC/epoch_best.ckpt

  # visdial model
  num_options = 100

  # predicting
  predict_split = test
  loads_start_path = true
  
  # visdial evaluation
  eval_batch_size = 1
  eval_line_batch_size = 50
}

## Phase 2 train on train split, eval on val split
MB-JC-HP-base = ${MB} {
  # basic
  train_on_dense = true
  metrics_to_maximize = ndcg
  visdial_val_dense = data/processed/visdial_1.0_val_with_vispro_bert_tokenized.json
  visdial_val = data/processed/visdial_1.0_val_with_vispro_bert_tokenized.json
  visdial_val_dense_annotations = data/processed/visdial_1.0_val_dense_annotations.json

  # data
  start_path = logs/joint/MB-JC/epoch_best.ckpt
  rlv_hst_only = true

  # visdial training
  nsp_loss_coeff = 0
  dense_loss_coeff = 1
  batch_multiply = 10
  batch_size = 1

  # visdial model
  num_options_dense = 56

  # visdial evaluation
  eval_batch_size = 2
  eval_line_batch_size = 250
  skip_mrr_eval = true

  # training
  stop_epochs = 3
  dp_type = dp

  # optimizer
  learning_rate_bert = 1e-4
}

MB-JC-HP-crf_cap = ${MB-JC-HP-base} {
  # visdial model
  max_seq_len = 120
  num_options_dense = 100
}

MB-JC-HP-crf = ${MB-JC-HP-crf_cap} {
  rlv_hst_train_dense = data/rlv_hst/train_dense_crf.json
  rlv_hst_train = data/rlv_hst/train_crf.json
  rlv_hst_val = data/rlv_hst/val_crf.json
  rlv_hst_test = data/rlv_hst/test_crf.json
}

MB-JC-HP-cap = ${MB-JC-HP-crf_cap} {
  rlv_hst_train_dense = data/rlv_hst/train_dense_cap.json
  rlv_hst_train = data/rlv_hst/train_cap.json
  rlv_hst_val = data/rlv_hst/val_cap.json
  rlv_hst_test = data/rlv_hst/test_cap.json
}

MB-JC-HP-all = ${MB-JC-HP-base} {
  # data
  visdial_train_dense = data/processed/visdial_1.0_train_dense_with_vispro_bert_tokenized.json
  visdial_train_dense_annotations = data/processed/visdial_1.0_train_dense_annotations_corrected.json
  rlv_hst_only = false
}

## Phase 2 train on train and val split, predict on test split
MB-JC-HP-base-trainval = ${MB-JC-HP-base} {
  # data
  visdial_val_dense_annotations = data/processed/visdial_1.0_val_dense_annotations_corrected.json

  # visdial training
  use_trainval = true

  # visdial evaluation
  skip_eval = true  
}

MB-JC-HP-crf_cap-trainval = ${MB-JC-HP-base-trainval} {
  # visdial model
  max_seq_len = 120
  num_options_dense = 100
}

MB-JC-HP-crf-trainval = ${MB-JC-HP-crf_cap-trainval} {
  rlv_hst_train_dense = data/rlv_hst/train_dense_crf.json
  rlv_hst_train = data/rlv_hst/train_crf.json
  rlv_hst_val = data/rlv_hst/val_crf.json
  rlv_hst_test = data/rlv_hst/test_crf.json
}

MB-JC-HP-cap-trainval = ${MB-JC-HP-crf_cap-trainval} {
  rlv_hst_train_dense = data/rlv_hst/train_dense_cap.json
  rlv_hst_train = data/rlv_hst/train_cap.json
  rlv_hst_val = data/rlv_hst/val_cap.json
  rlv_hst_test = data/rlv_hst/test_cap.json
}

MB-JC-HP-all-trainval = ${MB-JC-HP-base-trainval} {
  # data
  visdial_train_dense = data/processed/visdial_1.0_train_dense_with_vispro_bert_tokenized.json
  visdial_train_dense_annotations = data/processed/visdial_1.0_train_dense_annotations_corrected.json
  rlv_hst_only = false
}

MB-JC-HP-base-test = ${MB-JC-HP-base} {
  # visdial model
  num_options_dense = 100

  # restore ckpt
  loads_start_path = true
  
  # predicting
  predict_split = test
  save_score = true
}

MB-JC-HP-crf_cap-test = ${MB-JC-HP-base-test} {
  # data
  start_path = logs/vonly/MB-JC-HP-crf_cap-trainval/epoch_2.ckpt 

  # visdial model
  max_seq_len = 171

  # visdial evaluation
  eval_batch_size = 8
  eval_line_batch_size = 800
}

MB-JC-HP-crf-test = ${MB-JC-HP-crf_cap-test} {
  start_path = logs/vonly/MB-JC-HP-crf-trainval/epoch_2.ckpt 
  rlv_hst_train_dense = data/rlv_hst/train_dense_crf.json
  rlv_hst_train = data/rlv_hst/train_crf.json
  rlv_hst_val = data/rlv_hst/val_crf.json
  rlv_hst_test = data/rlv_hst/test_crf.json
}

MB-JC-HP-cap-test = ${MB-JC-HP-crf_cap-test} {
  start_path = logs/vonly/MB-JC-HP-cap-trainval/epoch_2.ckpt 
  rlv_hst_train_dense = data/rlv_hst/train_dense_cap.json
  rlv_hst_train = data/rlv_hst/train_cap.json
  rlv_hst_val = data/rlv_hst/val_cap.json
  rlv_hst_test = data/rlv_hst/test_cap.json
}

MB-JC-HP-all-test = ${MB-JC-HP-base-test} {
  visdial_test = data/processed/visdial_1.0_test_with_vispro_bert_tokenized.json
  start_path = logs/vonly/MB-JC-HP-all-trainval/epoch_2.ckpt 
  rlv_hst_only = false
}